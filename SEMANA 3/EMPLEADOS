# Clase	Persona, Empleado, Gerente

# Objeto.- emp1, emp2, gerente
# Herencia.- Empleado y Gerente heredan de Persona
# Encapsulación.- __salario es un atributo privado con métodos getter/setter
# Polimorfismo.- Método presentarse() se comporta diferente según la clase que lo implementa



# Clase base: Persona
class Persona:
    def __init__(self, nombre, edad):
        self.nombre = nombre      # atributo público
        self.edad = edad

    def presentarse(self):
        return f"Hola, soy {self.nombre} y tengo {self.edad} años."


# Clase derivada: Empleado (hereda de Persona)
class Empleado(Persona):
    def __init__(self, nombre, edad, salario, puesto):
        super().__init__(nombre, edad)  # Llamada al constructor de la clase base
        self.__salario = salario        # Atributo encapsulado (privado)
        self.puesto = puesto

    # Método para obtener el salario (getter)
    def obtener_salario(self):
        return self.__salario

    # Método para modificar el salario (setter)
    def establecer_salario(self, nuevo_salario):
        if nuevo_salario > 0:
            self.__salario = nuevo_salario
        else:
            print("El salario debe ser mayor que cero.")

    # Polimorfismo: sobrescribimos el método 'presentarse'
    def presentarse(self):
        return f"Hola, soy {self.nombre}, trabajo como {self.puesto} y tengo {self.edad} años."


# Otra clase derivada: Gerente (también hereda de Persona)
class Gerente(Empleado):
    def __init__(self, nombre, edad, salario, equipo=[]):
        super().__init__(nombre, edad, salario, "Gerente")
        self.equipo = equipo  # Lista de empleados a su cargo

    # Polimorfismo: otro sobrescrito del método 'presentarse'
    def presentarse(self):
        return f"Soy el gerente {self.nombre}, dirijo un equipo de {len(self.equipo)} personas."


# Ejecución del programa
if __name__ == "__main__":
    # Crear instancias
    emp1 = Empleado("Carlos", 30, 1200, "Programador")
    emp2 = Empleado("Laura", 28, 1100, "Diseñadora")

    # Usamos métodos (encapsulación)
    print(emp1.presentarse())
    print(f"Salario actual: ${emp1.obtener_salario()}")
    emp1.establecer_salario(1300)
    print(f"Nuevo salario: ${emp1.obtener_salario()}")

    print()

    # Crear un gerente con un equipo
    gerente = Gerente("Ana", 40, 2000, equipo=[emp1, emp2])
    print(gerente.presentarse())

    print()

    # Polimorfismo: usamos el mismo método 'presentarse' pero con diferentes clases
    personas = [emp1, emp2, gerente]
    for persona in personas:
        print(persona.presentarse())
