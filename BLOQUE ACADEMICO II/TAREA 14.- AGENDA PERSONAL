import tkinter as tk
from tkinter import ttk, messagebox
from tkcalendar import DateEntry
import datetime

class AgendaPersonal:
    def __init__(self, root):
        self.root = root
        self.root.title("Agenda Personal")
        self.root.geometry("800x600")
        self.root.resizable(True, True)
        
        # Configuración de estilo
        self.style = ttk.Style()
        self.style.theme_use('clam')
        
        # Variables para almacenar eventos
        self.eventos = []
        
        # Crear interfaz
        self.crear_widgets()
        
    def crear_widgets(self):
        # Frame principal
        main_frame = ttk.Frame(self.root, padding="10")
        main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # Configurar grid para expansión
        self.root.columnconfigure(0, weight=1)
        self.root.rowconfigure(0, weight=1)
        main_frame.columnconfigure(1, weight=1)
        main_frame.rowconfigure(1, weight=1)
        
        # Título
        titulo = ttk.Label(main_frame, text="Agenda Personal", font=("Arial", 16, "bold"))
        titulo.grid(row=0, column=0, columnspan=3, pady=(0, 15))
        
        # Frame para entrada de datos
        input_frame = ttk.LabelFrame(main_frame, text="Nuevo Evento", padding="10")
        input_frame.grid(row=1, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=(0, 10))
        input_frame.columnconfigure(1, weight=1)
        
        # Etiqueta y campo para fecha
        ttk.Label(input_frame, text="Fecha:").grid(row=0, column=0, sticky=tk.W, padx=(0, 5), pady=5)
        self.fecha_entry = DateEntry(input_frame, width=12, background='darkblue',
                                    foreground='white', borderwidth=2, date_pattern='yyyy-mm-dd')
        self.fecha_entry.grid(row=0, column=1, sticky=(tk.W, tk.E), padx=(0, 10), pady=5)
        
        # Etiqueta y campo para hora
        ttk.Label(input_frame, text="Hora:").grid(row=0, column=2, sticky=tk.W, padx=(0, 5), pady=5)
        self.hora_var = tk.StringVar(value=datetime.datetime.now().strftime("%H:%M"))
        self.hora_entry = ttk.Entry(input_frame, textvariable=self.hora_var, width=8)
        self.hora_entry.grid(row=0, column=3, sticky=tk.W, padx=(0, 10), pady=5)
        
        # Etiqueta y campo para descripción
        ttk.Label(input_frame, text="Descripción:").grid(row=1, column=0, sticky=tk.W, padx=(0, 5), pady=5)
        self.descripcion_entry = ttk.Entry(input_frame, width=40)
        self.descripcion_entry.grid(row=1, column=1, columnspan=3, sticky=(tk.W, tk.E), padx=(0, 10), pady=5)
        
        # Frame para botones
        button_frame = ttk.Frame(input_frame)
        button_frame.grid(row=2, column=0, columnspan=4, pady=10)
        
        # Botón para agregar evento
        self.agregar_btn = ttk.Button(button_frame, text="Agregar Evento", command=self.agregar_evento)
        self.agregar_btn.pack(side=tk.LEFT, padx=(0, 10))
        
        # Botón para eliminar evento seleccionado
        self.eliminar_btn = ttk.Button(button_frame, text="Eliminar Evento Seleccionado", 
                                      command=self.eliminar_evento)
        self.eliminar_btn.pack(side=tk.LEFT, padx=(0, 10))
        
        # Botón para salir
        self.salir_btn = ttk.Button(button_frame, text="Salir", command=self.root.quit)
        self.salir_btn.pack(side=tk.LEFT)
        
        # Frame para la lista de eventos
        list_frame = ttk.LabelFrame(main_frame, text="Eventos Programados", padding="10")
        list_frame.grid(row=2, column=0, columnspan=3, sticky=(tk.W, tk.E, tk.N, tk.S), pady=(10, 0))
        list_frame.columnconfigure(0, weight=1)
        list_frame.rowconfigure(0, weight=1)
        
        # Treeview para mostrar eventos
        columns = ('fecha', 'hora', 'descripcion')
        self.tree = ttk.Treeview(list_frame, columns=columns, show='headings')
        
        # Definir columnas
        self.tree.heading('fecha', text='Fecha')
        self.tree.heading('hora', text='Hora')
        self.tree.heading('descripcion', text='Descripción')
        
        # Ajustar ancho de columnas
        self.tree.column('fecha', width=100, anchor=tk.CENTER)
        self.tree.column('hora', width=80, anchor=tk.CENTER)
        self.tree.column('descripcion', width=400, anchor=tk.W)
        
        # Scrollbar para el treeview
        scrollbar = ttk.Scrollbar(list_frame, orient=tk.VERTICAL, command=self.tree.yview)
        self.tree.configure(yscrollcommand=scrollbar.set)
        
        # Colocar treeview y scrollbar en la interfaz
        self.tree.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        scrollbar.grid(row=0, column=1, sticky=(tk.N, tk.S))
        
        # Configurar expansión
        list_frame.columnconfigure(0, weight=1)
        list_frame.rowconfigure(0, weight=1)
        
        # Bind para seleccionar elemento con doble click
        self.tree.bind('<Double-1>', self.seleccionar_evento)
        
        # Cargar eventos de ejemplo (opcional)
        self.cargar_eventos_ejemplo()
    
    def cargar_eventos_ejemplo(self):
        """Carga algunos eventos de ejemplo para mostrar en la aplicación"""
        eventos_ejemplo = [
            (datetime.date.today(), "09:00", "Reunión de equipo"),
            (datetime.date.today() + datetime.timedelta(days=1), "14:30", "Almuerzo con cliente"),
            (datetime.date.today() + datetime.timedelta(days=2), "10:00", "Entrega de proyecto")
        ]
        
        for fecha, hora, descripcion in eventos_ejemplo:
            self.eventos.append({
                'fecha': fecha,
                'hora': hora,
                'descripcion': descripcion
            })
            self.tree.insert('', tk.END, values=(fecha, hora, descripcion))
    
    def agregar_evento(self):
        """Agrega un nuevo evento a la agenda"""
        fecha = self.fecha_entry.get_date()
        hora = self.hora_var.get()
        descripcion = self.descripcion_entry.get().strip()
        
        # Validar campos
        if not descripcion:
            messagebox.showerror("Error", "La descripción no puede estar vacía")
            return
        
        # Validar formato de hora
        try:
            datetime.datetime.strptime(hora, "%H:%M")
        except ValueError:
            messagebox.showerror("Error", "Formato de hora inválido. Use HH:MM")
            return
        
        # Agregar evento a la lista
        nuevo_evento = {
            'fecha': fecha,
            'hora': hora,
            'descripcion': descripcion
        }
        
        self.eventos.append(nuevo_evento)
        self.tree.insert('', tk.END, values=(fecha.strftime("%Y-%m-%d"), hora, descripcion))
        
        # Limpiar campos de entrada
        self.descripcion_entry.delete(0, tk.END)
        
        # Mensaje de confirmación
        messagebox.showinfo("Éxito", "Evento agregado correctamente")
    
    def eliminar_evento(self):
        """Elimina el evento seleccionado de la agenda"""
        seleccion = self.tree.selection()
        if not seleccion:
            messagebox.showwarning("Advertencia", "Por favor, seleccione un evento para eliminar")
            return
        
        # Diálogo de confirmación
        if messagebox.askyesno("Confirmar", "¿Está seguro de que desea eliminar el evento seleccionado?"):
            # Obtener índice del elemento seleccionado
            index = self.tree.index(seleccion[0])
            
            # Eliminar de la lista y del treeview
            del self.eventos[index]
            self.tree.delete(seleccion[0])
    
    def seleccionar_evento(self, event):
        """Selecciona un evento al hacer doble click sobre él"""
        item = self.tree.selection()[0]
        valores = self.tree.item(item, 'values')
        
        # Rellenar campos con los valores del evento seleccionado
        try:
            fecha = datetime.datetime.strptime(valores[0], "%Y-%m-%d").date()
            self.fecha_entry.set_date(fecha)
            self.hora_var.set(valores[1])
            self.descripcion_entry.delete(0, tk.END)
            self.descripcion_entry.insert(0, valores[2])
        except:
            messagebox.showerror("Error", "No se pudieron cargar los datos del evento")

def main():
    root = tk.Tk()
    app = AgendaPersonal(root)
    root.mainloop()

if __name__ == "__main__":
    main()