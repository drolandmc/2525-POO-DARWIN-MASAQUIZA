# ===============================
# Sistema de Gesti√≥n de Inventarios Mejorado
# ===============================

import os

class Producto:
    def __init__(self, id_producto, nombre, cantidad, precio):
        self.id = id_producto
        self.nombre = nombre
        self.cantidad = cantidad
        self.precio = precio

    # Getters
    def get_id(self):
        return self.id

    def get_nombre(self):
        return self.nombre

    def get_cantidad(self):
        return self.cantidad

    def get_precio(self):
        return self.precio

    # Setters
    def set_cantidad(self, cantidad):
        self.cantidad = cantidad

    def set_precio(self, precio):
        self.precio = precio

    def __str__(self):
        return f"ID: {self.id} | Nombre: {self.nombre} | Cantidad: {self.cantidad} | Precio: ${self.precio:.2f}"

    # Para guardar en archivo en formato CSV
    def to_line(self):
        return f"{self.id},{self.nombre},{self.cantidad},{self.precio}\n"

    @staticmethod
    def from_line(linea):
        """Convierte una l√≠nea del archivo en un objeto Producto"""
        try:
            id_producto, nombre, cantidad, precio = linea.strip().split(",")
            return Producto(id_producto, nombre, int(cantidad), float(precio))
        except ValueError:
            # Si la l√≠nea est√° corrupta
            return None


class Inventario:
    def __init__(self, archivo="inventario.txt"):
        self.productos = []
        self.archivo = archivo
        self.cargar_desde_archivo()

    # ===============================
    # Manejo de archivo
    # ===============================
    def cargar_desde_archivo(self):
        """Carga los productos desde el archivo de inventario."""
        try:
            if not os.path.exists(self.archivo):
                # Si no existe, lo crea vac√≠o
                open(self.archivo, "w").close()
                return
            with open(self.archivo, "r", encoding="utf-8") as f:
                for linea in f:
                    producto = Producto.from_line(linea)
                    if producto:  # Ignora l√≠neas corruptas
                        self.productos.append(producto)
        except PermissionError:
            print("‚ùå Error: No tienes permisos para leer el archivo de inventario.")
        except Exception as e:
            print(f"‚ö†Ô∏è Error inesperado al cargar inventario: {e}")

    def guardar_en_archivo(self):
        """Guarda el inventario actual en el archivo."""
        try:
            with open(self.archivo, "w", encoding="utf-8") as f:
                for p in self.productos:
                    f.write(p.to_line())
        except PermissionError:
            print("‚ùå Error: No tienes permisos para escribir en el archivo.")
        except Exception as e:
            print(f"‚ö†Ô∏è Error inesperado al guardar inventario: {e}")

    # ===============================
    # M√©todos de inventario
    # ===============================
    def a√±adir_producto(self, producto):
        for p in self.productos:
            if p.get_id() == producto.get_id():
                print("‚ùå Error: El ID ya existe en el inventario.")
                return
        self.productos.append(producto)
        self.guardar_en_archivo()
        print("‚úÖ Producto a√±adido y guardado en archivo.")

    def eliminar_producto(self, id_producto):
        for p in self.productos:
            if p.get_id() == id_producto:
                self.productos.remove(p)
                self.guardar_en_archivo()
                print("‚úÖ Producto eliminado del inventario y archivo.")
                return
        print("‚ùå Producto no encontrado.")

    def actualizar_producto(self, id_producto, nueva_cantidad=None, nuevo_precio=None):
        for p in self.productos:
            if p.get_id() == id_producto:
                if nueva_cantidad is not None:
                    p.set_cantidad(nueva_cantidad)
                if nuevo_precio is not None:
                    p.set_precio(nuevo_precio)
                self.guardar_en_archivo()
                print("‚úÖ Producto actualizado en inventario y archivo.")
                return
        print("‚ùå Producto no encontrado.")

    def buscar_por_nombre(self, nombre):
        resultados = [p for p in self.productos if nombre.lower() in p.get_nombre().lower()]
        if resultados:
            print("üîé Resultados de la b√∫squeda:")
            for p in resultados:
                print(p)
        else:
            print("‚ùå No se encontraron productos con ese nombre.")

    def mostrar_todos(self):
        if not self.productos:
            print("üì¶ El inventario est√° vac√≠o.")
        else:
            print("üìã Lista de productos en el inventario:")
            for p in self.productos:
                print(p)


# ===============================
# Interfaz de Usuario
# ===============================
def menu():
    inventario = Inventario()

    while True:
        print("\n===== MEN√ö DE INVENTARIO =====")
        print("1. A√±adir producto")
        print("2. Eliminar producto")
        print("3. Actualizar producto")
        print("4. Buscar producto por nombre")
        print("5. Mostrar todos los productos")
        print("6. Salir")

        opcion = input("Seleccione una opci√≥n: ")

        if opcion == "1":
            try:
                id_producto = input("Ingrese ID del producto: ")
                nombre = input("Ingrese nombre: ")
                cantidad = int(input("Ingrese cantidad: "))
                precio = float(input("Ingrese precio: "))
                producto = Producto(id_producto, nombre, cantidad, precio)
                inventario.a√±adir_producto(producto)
            except ValueError:
                print("‚ùå Error: datos inv√°lidos.")

        elif opcion == "2":
            id_producto = input("Ingrese ID del producto a eliminar: ")
            inventario.eliminar_producto(id_producto)

        elif opcion == "3":
            id_producto = input("Ingrese ID del producto a actualizar: ")
            try:
                nueva_cantidad = input("Nueva cantidad (enter para no cambiar): ")
                nuevo_precio = input("Nuevo precio (enter para no cambiar): ")

                cantidad = int(nueva_cantidad) if nueva_cantidad else None
                precio = float(nuevo_precio) if nuevo_precio else None

                inventario.actualizar_producto(id_producto, cantidad, precio)
            except ValueError:
                print("‚ùå Error: datos inv√°lidos.")

        elif opcion == "4":
            nombre = input("Ingrese el nombre del producto a buscar: ")
            inventario.buscar_por_nombre(nombre)

        elif opcion == "5":
            inventario.mostrar_todos()

        elif opcion == "6":
            print("üëã Saliendo del sistema...")
            break

        else:
            print("‚ùå Opci√≥n no v√°lida. Intente de nuevo.")


# ===============================
# Ejecuci√≥n principal
# ===============================
if __name__ == "__main__":
    menu()

